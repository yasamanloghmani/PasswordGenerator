{"version":3,"sources":["utils/GeneratePassword.js","App.js","serviceWorker.js","index.js"],"names":["GenratePassword","this","characters","length","isUpperCase","isLowerCase","isNumeric","isSymbolic","characterList","min","max","password","i","Math","floor","random","App","props","state","newLength","pwd","upperCase","lowerCase","numeric","symbol","typing","typingTimeout","generatePwd","setLength","setLowerCase","setUpperCase","setNumberCase","setSymbol","generate","setState","e","target","name","checked","value","className","style","marginTop","id","type","readOnly","onChange","handleCheckbox","htmlFor","width","handleLenghtChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a4a4d42.chunk.js","sourcesContent":["export class GenratePassword {\n    constructor() {\n      this.characters = \"\";\n    }\n    setLength(length) {\n        this.length = length;\n        return this;\n    }\n    setUpperCase(isUpperCase) {\n      if (isUpperCase) {\n        this.characters += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n      }\n      return this;\n    }\n    setLowerCase(isLowerCase) {\n      if (isLowerCase) {\n        this.characters += \"abcdefghijklmnopqrstuvwxyz\";\n      }\n      return this;\n    }\n    setNumberCase(isNumeric) {\n      if (isNumeric) {\n        this.characters += \"0123456789\";\n      }\n      return this;\n    }\n    setSymbol(isSymbolic) {\n      if (isSymbolic) {\n        this.characters += \"!@$%^&*()<>,.?/[]{}-=_+\";\n      }\n      return this;\n    }\n    generate() {\n      let characterList = this.characters;\n      if (characterList.length <= 0) {\n        return \"May'be you're in search of unknown! Keep looking\";\n      }\n      var password = \"\";\n      for (let i = 0; i < this.length; ++i) {\n        password += characterList[getRandomInt(0, characterList.length - 1)];\n      }\n      return password;\n    }\n  }\n  \n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }","import React, { Component } from 'react';\nimport { GenratePassword } from './utils/GeneratePassword';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      length: 8,\n      newLength: 8,\n      pwd: \"\",\n      upperCase: true,\n      lowerCase: true,\n      numeric: true,\n      symbol: false,\n      typing: false,\n      typingTimeout: 0\n    }\n  }\n\n  componentDidMount() {\n    this.generatePwd();\n  }\n  generatePwd() {\n    const { upperCase, lowerCase, numeric, symbol, length } = this.state;\n    let pwd = new GenratePassword()\n      .setLength(length)\n      .setLowerCase(lowerCase)\n      .setUpperCase(upperCase)\n      .setNumberCase(numeric)\n      .setSymbol(symbol)\n      .generate();\n    this.setState({ pwd });\n  }\n\n  handleCheckbox(e) {\n    const { name, checked } = e.target;\n    this.setState({\n      [name]: checked\n    });\n    this.generatePwd();\n  }\n\n  handleLenghtChange({ target: { value } }) {\n    if (value >= 40) {\n      value = 40;\n    }\n    this.setState({ length: value }, () => this.generatePwd());\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n        <div className=\"container\" style={{ marginTop: 20 }}>\n          <section>\n            <header>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <h1 className=\"main-header\">\n                    Generate a secure password\n                  </h1>\n                </div>\n              </div>\n            </header>\n            <div className=\"input-container\">\n              <input\n                id=\"input\"\n                name=\"password\"\n                type=\"text\"\n                readOnly\n                value={this.state.pwd}\n              />\n            </div>\n          </section>\n          {/* <hr /> */}\n          <section>\n            <header>\n              <h3>Customize your password</h3>\n            </header>\n            {/* <fieldset> */}\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                  <div className=\"checkbox-container1\">\n                    <label className=\"checkbox-container switch\">\n                      Uppercase\n                      <input\n                        type=\"checkbox\"\n                        checked={this.state.upperCase}\n                        name=\"upperCase\"\n                        onChange={e => this.handleCheckbox(e)}\n                      />\n                      <span className=\"slider round\" />\n                    </label>\n                  </div>\n                    <div className=\"checkbox-container1\">\n                    <label className=\"checkbox-container switch\">\n                      Lowercase\n                      <input\n                        type=\"checkbox\"\n                        checked={this.state.lowerCase}\n                        name=\"lowerCase\"\n                        onChange={e => this.handleCheckbox(e)}\n                      />\n                      <span className=\"slider round\" />\n                    </label>\n                    </div>\n                    <div className=\"checkbox-container1\">\n                    <label className=\"checkbox-container switch\">\n                      Numeric\n                      <input\n                        type=\"checkbox\"\n                        checked={this.state.numeric}\n                        name=\"numeric\"\n                        onChange={e => this.handleCheckbox(e)}\n                      />\n                      <span className=\"slider round\" />\n                    </label>\n                    </div>\n                    </div>\n                    <div className=\"checkbox-container1\">\n                    <label className=\"checkbox-container switch\">\n                      Symbols\n                      <input\n                        type=\"checkbox\"\n                        checked={this.state.symbol}\n                        name=\"symbol\"\n                        onChange={e => this.handleCheckbox(e)}\n                      />\n                      <span className=\"slider round\" />\n                    </label>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <div className=\"row length-input\">\n                      <div className=\"col\">\n                        <label htmlFor=\"email\">Password Length:</label>\n                        &nbsp;&nbsp;\n                      </div>\n                      <div className=\"col lngh\">\n                        <input\n                          type=\"number\"\n                          min=\"8\"\n                          max=\"40\"\n                          style={{ width: 65 }}\n                          value={this.state.length}\n                          onChange={e => this.handleLenghtChange(e)}\n                        />\n                      </div>\n                    </div>\n                    &nbsp;\n                    <div className=\"slider-container\">\n                      <input\n                        className=\"hi\"\n                        type=\"range\"\n                        min=\"8\"\n                        max=\"40\"\n                        value={this.state.length}\n                        onChange={e => this.handleLenghtChange(e)}\n                      />\n                    </div>\n                  </div>\n                </div>\n            {/* </fieldset> */}\n            <br />\n            <div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button\n                    className=\"btn  btn-primary\"\n                    onClick={() => {\n                      this.generatePwd();\n                    }}\n                  >\n                    Generate\n                  </button>\n                </div>\n              </div>\n\n              <br />\n              <br />\n            </div>\n          </section>\n        </div>\n      </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}